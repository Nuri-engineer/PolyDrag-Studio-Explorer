(()=>{var t={678:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.items=[],this.container=document.createElement("div"),this.shadowRoot.appendChild(this.container),this.container.addEventListener("dragstart",t=>{const e=t.target.closest(".polygon");e&&t.dataTransfer.setData("text/plain",e.dataset.id)});const t=document.createElement("style");t.textContent="\n      .polygon {\n          margin: 8px;\n          cursor: grab;\n          display: inline-block;\n      }\n    ",this.shadowRoot.appendChild(t)}set data(t){Array.isArray(t)&&(this.items=t,this.render())}connectedCallback(){this.render()}render(){if(!this.items.length)return void(this.container.innerHTML="<p>Нет полигонов</p>");const t=document.createDocumentFragment();this.items.forEach(e=>{const s=document.createElement("div");s.className="polygon",s.draggable=!0,s.dataset.id=e.id,s.innerHTML=e.svg,t.appendChild(s)}),this.container.innerHTML="",this.container.appendChild(t)}}customElements.define("zone-buffer",t)}},e={};function s(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,s),o.exports}(()=>{"use strict";s(678);class t{constructor(t,e,s,n){this.svg=t,this.gridGroup=e,this.axesGroup=s,this.gridStep=n}render(t,e,s){if(!this.svg)return;const n=this.svg.clientWidth,i=this.svg.clientHeight;this.gridGroup.innerHTML="",this.axesGroup.innerHTML="";let o=this.gridStep,r=o/t,a=Math.pow(10,Math.floor(Math.log10(r))),l=r/a;o=([1,2,5,10].find(t=>l<=t)||10)*a*t;const h=e%o,d=s%o,c=-e/t,g=10*Math.floor(c/10),p=-s/t,u=10*Math.floor(p/10);for(let t=h;t<=n;t+=o){const e=document.createElementNS("http://www.w3.org/2000/svg","line");e.setAttribute("x1",t),e.setAttribute("y1",0),e.setAttribute("x2",t),e.setAttribute("y2",i),e.classList.add("grid-line"),this.gridGroup.appendChild(e);const s=g+10*Math.round((t-h)/o);if(s>=0){const e=document.createElementNS("http://www.w3.org/2000/svg","text");e.setAttribute("x",t),e.setAttribute("y",i-5),e.setAttribute("text-anchor","middle"),e.classList.add("axis-label"),e.textContent=s,this.gridGroup.appendChild(e)}}for(let t=d;t<=i;t+=o){const e=document.createElementNS("http://www.w3.org/2000/svg","line");e.setAttribute("x1",0),e.setAttribute("y1",t),e.setAttribute("x2",n),e.setAttribute("y2",t),e.classList.add("grid-line"),this.gridGroup.appendChild(e);const s=u+10*Math.round((i-t-d)/o);if(0!==s&&s>=0){const e=document.createElementNS("http://www.w3.org/2000/svg","text");e.setAttribute("x",0),e.setAttribute("y",t),e.classList.add("axis-label"),e.textContent=s,this.gridGroup.appendChild(e)}}}}class e{constructor(t){this.contentGroup=t,this.items=[]}setItems(t){this.items=Array.isArray(t)?t:[],this.render()}render(){if(!this.contentGroup)return;const t=new Map;this.contentGroup.querySelectorAll(".polygon").forEach(e=>{t.set(e.dataset.id,e)}),this.items.forEach(e=>{let s=t.get(e.id);s||(s=document.createElementNS("http://www.w3.org/2000/svg","g"),s.classList.add("polygon"),s.setAttribute("draggable","true"),s.dataset.id=e.id,s.innerHTML=e.svg,this.contentGroup.appendChild(s),s.addEventListener("dragstart",t=>{t.dataTransfer.setData("text/plain",s.dataset.id),t.dataTransfer.effectAllowed="move",this.contentGroup.appendChild(s);const e=s.dataset.id,n=this.items.findIndex(t=>t.id===e);if(-1!==n){const[t]=this.items.splice(n,1);this.items.push(t)}})),null!=e.x&&null!=e.y?s.setAttribute("transform",`translate(${e.x},${e.y})`):s.removeAttribute("transform"),t.delete(e.id)}),t.forEach(t=>t.remove())}}class n{constructor(){this.scale=1,this.minScale=.2,this.maxScale=5,this.translateX=0,this.translateY=0,this.isPanning=!1,this.panStart={x:0,y:0},this.panTranslateStart={x:0,y:0}}setScale(t,e,s){const n=Math.min(this.maxScale,Math.max(this.minScale,t));this.translateX=e-(e-this.translateX)*n/this.scale,this.translateY=s-(s-this.translateY)*n/this.scale,this.scale=n}startPan(t,e){this.isPanning=!0,this.panStart={x:t,y:e},this.panTranslateStart={x:this.translateX,y:this.translateY}}panTo(t,e){if(!this.isPanning)return;const s=t-this.panStart.x,n=e-this.panStart.y;this.translateX=this.panTranslateStart.x+s,this.translateY=this.panTranslateStart.y+n}endPan(){this.isPanning=!1}startPan(t,e){this.isPanning=!0,this.panStart={x:t,y:e},this.panTranslateStart={x:this.translateX,y:this.translateY}}panTo(t,e){if(!this.isPanning)return;const s=t-this.panStart.x,n=e-this.panStart.y;this.translateX=this.panTranslateStart.x+s,this.translateY=this.panTranslateStart.y+n}endPan(){this.isPanning=!1}}class i extends HTMLElement{constructor(){super(),this.items=[],this._availablePolygons=[],this.gridStep=50,this.attachShadow({mode:"open"})}connectedCallback(){this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          display: block;\n          border: 1px solid #ccc;\n          user-select: none;\n          overflow: hidden;\n          position: relative;\n          height: 300px;\n        }\n        svg {\n          width: 100%;\n          height: 100%;\n          background: #fafafa;\n          cursor: grab;\n        }\n        svg:active {\n          cursor: grabbing;\n        }\n        .polygon {\n          cursor: grab;\n        }\n        text.axis-label {\n          font-size: 10px;\n          fill: #666;\n          user-select: none;\n        }\n        line.grid-line {\n          stroke: #ddd;\n          stroke-width: 1;\n        }\n        line.axis-line {\n          stroke: #333;\n          stroke-width: 2;\n        }\n      </style>\n      <svg tabindex="0">\n        <defs>\n          <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" \n                  orient="auto" markerUnits="strokeWidth">\n            <path d="M0,0 L0,6 L9,3 z" fill="#333" />\n          </marker>\n        </defs>\n        <g class="grid"></g>\n        <g class="axes"></g>\n        <g class="content" transform="translate(0,0) scale(1)"></g>\n      </svg>\n    ',this.svg=this.shadowRoot.querySelector("svg"),this.gridGroup=this.svg.querySelector("g.grid"),this.axesGroup=this.svg.querySelector("g.axes"),this.contentGroup=this.svg.querySelector("g.content"),this.transformController=new n,this.gridRenderer=new t(this.svg,this.gridGroup,this.axesGroup,this.gridStep),this.polygonManager=new e(this.contentGroup),this.svg.addEventListener("wheel",this.onWheel.bind(this),{passive:!1}),this.svg.addEventListener("mousedown",this.onMouseDown.bind(this)),window.addEventListener("mouseup",this.onMouseUp.bind(this)),window.addEventListener("mousemove",this.onMouseMove.bind(this)),this.svg.addEventListener("dragover",this.onDragOver.bind(this)),this.svg.addEventListener("drop",this.onDrop.bind(this)),this.render()}set data(t){this.items=Array.isArray(t)?t:[],this.polygonManager.setItems(this.items),this.render()}set availablePolygons(t){this._availablePolygons=Array.isArray(t)?t:[]}get availablePolygons(){return this._availablePolygons||[]}render(){this.polygonManager.render(),this.updateTransform(),this.gridRenderer.render(this.transformController.scale,this.transformController.translateX,this.transformController.translateY)}updateTransform(){const{translateX:t,translateY:e,scale:s}=this.transformController;this.contentGroup.setAttribute("transform",`translate(${t},${e}) scale(${s})`)}onWheel(t){t.preventDefault();const e=this.svg.getBoundingClientRect(),s=t.clientX-e.left,n=t.clientY-e.top,i=t.deltaY<0?1.1:.9,o=this.transformController.scale*i;this.transformController.setScale(o,s,n),this.render()}onMouseDown(t){0===t.button&&(this.transformController.startPan(t.clientX,t.clientY),this.svg.style.cursor="grabbing")}onMouseMove(t){this.transformController.isPanning&&(this.transformController.panTo(t.clientX,t.clientY),this.render())}onMouseUp(t){0===t.button&&(this.transformController.endPan(),this.svg.style.cursor="grab")}onDragOver(t){t.preventDefault(),t.dataTransfer.dropEffect="move"}onDrop(t){t.preventDefault();const e=t.dataTransfer.getData("text/plain");if(!e)return;if(this.items.find(t=>t.id===e))return;const s=this.availablePolygons.find(t=>t.id===e);if(!s)return;document.querySelectorAll("zone-work").forEach(t=>{if(t===this)return;const s=t.items.findIndex(t=>t.id===e);-1!==s&&(t.items.splice(s,1),t.render())});const n=this.getScenePoint(t.clientX,t.clientY),i={...s,x:n.x,y:n.y,svg:s.svg.replace("<g ",`<g transform="translate(${n.x},${n.y})" `)};this.items.push(i),this.polygonManager.setItems(this.items),this.render()}getScenePoint(t,e){const s=this.svg.getBoundingClientRect(),n=this.svg.clientHeight,{translateX:i,translateY:o,scale:r}=this.transformController;return{x:(t-s.left-i)/r,y:(n-(e-s.top)-o)/r}}}function o(t){const e=Math.floor(4*Math.random())+3,s=Math.floor(40*Math.random())+30,n=[];for(let t=0;t<e;t++){const i=2*Math.PI*t/e;let o;o=t%2==0?s*(.7+1*Math.random())*(Math.random(),1):s*(1+1*Math.random());const r=50+o*Math.cos(i),a=50+o*Math.sin(i);n.push(`${r},${a}`)}return{id:t,svg:`<svg width="100" height="100"><polygon points="${n.join(" ")}" fill="#9d3a60ff" stroke="#333" stroke-width="2"/></svg>`}}customElements.define("zone-work",i);class r{constructor({helpIconId:t="help-icon",modalOverlaySelector:e=".modal-overlay"}={}){this.helpIcon=document.getElementById(t),this.modalOverlay=document.querySelector(e),this.helpIcon&&this.modalOverlay?(this.closeButton=this.modalOverlay.querySelector(".close-button"),this.helpModal=this.modalOverlay.querySelector(".help-modal"),this.handleOpen=this.openModal.bind(this),this.handleKeyDownIcon=this.onIconKeyDown.bind(this),this.handleOverlayClick=this.closeModal.bind(this),this.handleModalClick=t=>t.stopPropagation(),this.handleCloseClick=this.closeModal.bind(this),this.handleWindowKeyDown=this.onWindowKeyDown.bind(this)):console.warn("HelpModal: необходимые элементы не найдены в DOM")}init(){this.helpIcon&&this.modalOverlay&&(this.helpIcon.addEventListener("click",this.handleOpen),this.helpIcon.addEventListener("keydown",this.handleKeyDownIcon),this.modalOverlay.addEventListener("click",this.handleOverlayClick),this.helpModal.addEventListener("click",this.handleModalClick),this.closeButton.addEventListener("click",this.handleCloseClick),window.addEventListener("keydown",this.handleWindowKeyDown))}openModal(){this.modalOverlay.style.display="flex",document.body.style.overflow="hidden",this.closeButton.focus()}closeModal(){this.modalOverlay.style.display="none",document.body.style.overflow="",this.helpIcon.focus()}onIconKeyDown(t){"Enter"!==t.key&&" "!==t.key||(t.preventDefault(),this.openModal())}onWindowKeyDown(t){"Escape"===t.key&&"flex"===this.modalOverlay.style.display&&this.closeModal()}destroy(){this.helpIcon&&this.modalOverlay&&(this.helpIcon.removeEventListener("click",this.handleOpen),this.helpIcon.removeEventListener("keydown",this.handleKeyDownIcon),this.modalOverlay.removeEventListener("click",this.handleOverlayClick),this.helpModal.removeEventListener("click",this.handleModalClick),this.closeButton.removeEventListener("click",this.handleCloseClick),window.removeEventListener("keydown",this.handleWindowKeyDown))}}const a="polygons";class l{constructor(){this.bufferItems=[],this.workItems=[],this.elements={bufferZone:document.getElementById("bufferZone"),workZone:document.getElementById("workZone"),saveBtn:document.getElementById("saveBtn"),resetBtn:document.getElementById("resetBtn"),createBtn:document.getElementById("createBtn")}}init(){this.loadPolygons(),this.setupEventListeners(),this.updateComponents()}loadPolygons(){try{const t=localStorage.getItem(a);if(!t)return;const{work:e=[]}=JSON.parse(t);this.workItems=Array.isArray(e)?e:[]}catch(t){console.error("Ошибка при загрузке данных:",t)}}savePolygons(){try{const t={work:this.workItems};localStorage.setItem(a,JSON.stringify(t)),this.showFeedback("Сохранено!")}catch(t){console.error("Ошибка при сохранении:",t),this.showFeedback("Ошибка сохранения!",!0)}}resetPolygons(){try{localStorage.removeItem(a),this.workItems=[],this.updateComponents(),this.showFeedback("Данные сброшены!")}catch(t){console.error("Ошибка при сбросе:",t),this.showFeedback("Ошибка сброса!",!0)}}generateNewPolygons(){const t=Math.floor(16*Math.random())+5;this.bufferItems=function(t){const e=[],s=new Set;let n=0;const i=10*t;for(;e.length<t&&n<i;){const t=o(`poly${e.length}`),i=t.svg.match(/points="([^"]+)"/)?.[1]||"";s.has(i)||(s.add(i),e.push(t)),n++}return e}(t),this.updateComponents()}updateComponents(){const{bufferZone:t,workZone:e}=this.elements;t.data!==this.bufferItems&&(t.data=this.bufferItems),e.data!==this.workItems&&(e.data=this.workItems),e.availablePolygons=[...this.bufferItems,...this.workItems]}setupEventListeners(){const{createBtn:t,saveBtn:e,resetBtn:s}=this.elements;t.addEventListener("click",()=>this.generateNewPolygons()),e.addEventListener("click",()=>this.savePolygons()),s.addEventListener("click",()=>this.resetPolygons())}showFeedback(t,e=!1){alert(t),e?console.error(t):console.log(t)}}document.addEventListener("DOMContentLoaded",()=>{["bufferZone","workZone","saveBtn","resetBtn","createBtn"].every(t=>document.getElementById(t))?((new l).init(),(new r).init()):console.error("Не все необходимые элементы найдены в DOM")})})()})();